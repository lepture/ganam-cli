#!/usr/bin/env node

var fs = require('fs');
var path = require('path');

main(process.argv.slice(2));

function main(argv) {
  var options = {

    // stylus options
    includeCSS: false,
    paths: [],
    compress: false,
    plugins: [],
    imports: [],

    watch: false,
    quiet: false,
    verbose: false,
  };

  var getArg = function() {
    var args = argv.shift();
    args = args.split('=');
    if (args.length > 1) {
      argv.unshit(args.slice(1).join('='));
    }
    return args[0];
  };

  var arg, remains = [];

  while (argv.length) {
    arg = getArg();
    switch(arg) {
      case '-h':
      case '--help':
        helpMessage();
        break;
      case '-V':
      case '--version':
        versionMessage();
        break;

      case '-q':
      case '--quiet':
        options.quiet = true;
        break;
      case '-v':
      case '--verbose':
        options.verbose = true;
        break;
      case '-o':
      case '--out':
        options.out = argv.shift();
        break;
      case '-t':
      case '--theme':
        options.theme = argv.shift();
        break;

      case '--include-css':
        options.includeCSS = true;
        break;
      case '-c':
      case '--compress':
        options.compress = true;
        break;
      case '-I':
      case '--include':
        var _p = argv.shift();
        if (!_p) throw new Error('--include <path> required');
        options.paths.push(_p);
        break;
      case '--import':
        var file = argv.shift();
        if (!file) throw new Error('--import <file> required');
        options.imports.push(file);
        break;
      case '-w':
      case '--watch':
        options.watch = true;
        break;

      default:
        remains.push(arg);
        break;
    }
  }

  if (!remains.length) {
    console.log('You need to specify a directory');
    process.exit(1);
  }

  options.src = remains[0];
  var ganam = require('../');
  ganam(options);

  if (options.watch) {
    var fs = require('fs');
    var path = require('path');
    ganam.log.info('watch - ' + options.src);
    ganam.recurse(options.src, function(filepath) {
      watch(filepath, function(filepath) {
        ganam.log.debug('change - ' + filepath);
        ganam(options);
      });
    });
  }
}

function helpMessage() {
  console.log();
  var lines = [
    '  Usage: ganam [options] <dir>',
    '',
    '  Options:',
    '',
    '    -o, --out <dir>        Output to <dir> when passing files',
    '    -t, --theme <name>     Specify the theme, default is ganam',
    '    -u, --use <path>       Utilize the stylus plugin at <path>',
    '    -I, --include <path>   Add <path> to lookup paths',
    '    -c, --compress         Compress css output',
    '    --import <file>        Import stylus <file>',
    '    --include-css          Include regular css on @import',
    '    -w, --watch            Watch file(s) for changes and re-compile',
    '    -q, --quiet            Only show warn logs',
    '    -v, --verbose          Show more logs',
    '    -V, --version          Display the version',
    '    -h, --help             Display this help menu',
    ''
  ];
  console.log(lines.join('\n'));
  process.exit();
}

function versionMessage() {
  var pkg = require('../package.json');
  var format = require('util').format;
  var ganamDir = path.dirname(require.resolve('ganam'));
  var ganam = require(path.join(ganamDir, 'package.json'));
  console.log()
  console.log(format(
    ' ganam %s, %s %s (%s)',
    ganam.version,
    pkg.name, pkg.version,
    process.platform
  ));
  console.log()
  process.exit();
}

function watch(file, fn) {
  // if is windows use fs.watch api instead
  // TODO: remove watchFile when fs.watch() works on osx etc
  if (process.platform === 'win32') {
    fs.watch(file, function(event) {
      if (event === 'change') {
        fn(file);
      }
    });
  } else {
    fs.watchFile(file, { interval: 300 }, function(curr, prev) {
      if (curr.mtime > prev.mtime) {
        fn(file);
      }
    });
  }
}
